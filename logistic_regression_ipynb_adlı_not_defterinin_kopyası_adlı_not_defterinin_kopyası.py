# -*- coding: utf-8 -*-
"""logistic_regression.ipynb adl覺 not defterinin kopyas覺 adl覺 not defterinin kopyas覺

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m2-AAStNRVz9V8St8PElIpmKefH0DI5H

K-NN

## Importing the libraries
"""

import numpy as nm
import matplotlib.pyplot as mtp
import pandas as pd

"""## Importing the dataset"""

data_set=pd.read_csv('users2.csv')

"""## Extracting independent and dependent variable

"""

x=data_set.iloc[:,[0,1]].values
y=data_set.iloc[:,2].values

"""#Splitting the dataset into training and test set

"""

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,random_state=0,test_size=0.25)

print(x_test)

"""## Feature Scaling"""

from sklearn.preprocessing import StandardScaler
st_x=StandardScaler()
x_train=st_x.fit_transform(x_train)
x_test=st_x.transform(x_test)

print(y_test)

"""## Fitting K-NN

"""

from sklearn.neighbors import KNeighborsClassifier
classifier=KNeighborsClassifier(n_neighbors=5,metric='minkowski',p=2)
classifier.fit(x_train,y_train)

"""## Predicting a new result"""

y_pred=classifier.predict(x_test)

print(y_pred)

"""## Making the Confusion Matrix"""

from sklearn.metrics import confusion_matrix
cm=confusion_matrix(y_test,y_pred)

print(cm)

"""## Visualising the Training set results"""

from matplotlib.colors import ListedColormap
x_set, y_set = x_train, y_train
x1, x2 = nm.meshgrid(nm.arange(start = x_set[:, 0].min() - 1, stop = x_set[:, 0].max() + 1, step  =0.01),
nm.arange(start = x_set[:, 1].min() - 1, stop = x_set[:, 1].max() + 1, step = 0.01))
mtp.contourf(x1, x2, classifier.predict(nm.array([x1.ravel(), x2.ravel()]).T).reshape(x1.shape),
alpha = 0.75, cmap = ListedColormap(('red','green' )))
mtp.xlim(x1.min(), x1.max())
mtp.ylim(x2.min(), x2.max())
for i, j in enumerate(nm.unique(y_set)):
    mtp.scatter(x_set[y_set == j, 0], x_set[y_set == j, 1],
        c = ListedColormap(('red', 'green'))(i), label = j)
mtp.title('K-NN Algorithm (Training set)')
mtp.xlabel('Age')
mtp.ylabel('Estimated Salary')
mtp.legend()
mtp.show()

"""## Visualising the Test set results"""